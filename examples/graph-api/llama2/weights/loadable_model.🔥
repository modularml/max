# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #
"""A module containing generic weight loading traits and types."""

from pathlib import Path
from tensor import Tensor
from collections import Optional


@value
@register_passable("trivial")
struct LlamaHParams:
    """Hyperparameters defining Llama model instances."""

    var dims: Int
    """Channel dimension of input features."""

    var n_layers: Int
    """Number of transformer layers."""

    var n_heads: Int
    """Number of attention heads."""

    var vocab_size: Int
    """Number of tokens in vocabulary."""

    var norm_eps: Float64
    """Epsilon used in normalization layers."""

    var n_kv_heads: Int
    """Number of key and value heads."""

    var head_dim: Int
    """Channel dimension of per-head features in attention."""

    var n_rep: Int
    """Number of repetitions for local heads."""


trait LoadableModel(Movable):
    """A trait for the weights file of an ML model.

    Types implementing `LoadableModel` are constructible from a `Path`, have a
    `get` method for tensor data, and know their own model hyperparameters.
    """

    fn __init__(inout self, path: Path) raises:
        """Initializes the weights file from a path.

        Args:
            path: Filepath to the model's weights file.
        """
        ...

    fn get[
        type: DType
    ](
        inout self, key: String, layer_idx: Optional[Int] = None
    ) raises -> Tensor[type]:
        """Returns a tensor for `key` at layer `layer_idx`, possibly seeking the file.

        `self` is `inout` here due to implementations that seek a file pointer.

        Args:
            key: Used to look up the tensor in the weights file.
            layer_idx: An optional layer index for this key.

        Returns:
            A tensor corresponding to `key` and `layer_idx` and containing a
            copy of data from the weights file.

        Raises:
            An error for invalid key/layer_idx arguments.
        """
        ...

    fn hyperparams(self) -> LlamaHParams:
        """Retrieves model-specific hyperparameters.

        Returns:
            Hyperparameters for the model corresponding to this weights file.
        """
        ...
